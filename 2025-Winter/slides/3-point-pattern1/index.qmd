---
format: 
  revealjs:
    pagetitle: "Point Pattern I"
    menu: false
    footer: "2025 Zehui Yin"
---

## Packages we use today

Load the following three packages.

```{r, echo=TRUE, eval=FALSE}
library(isdas)
library(sf)
library(tidyverse)
library(spatstat)
```

If you have trouble restoring the reproducible environment, you need to manually install the packages first.

```{r, echo=TRUE, eval=FALSE}
install.packages("remotes")
remotes::install_github("paezha/isdas")

install.packages("sf")

install.packages("tidyverse")

install.packages("spatstat")
```

## New package for today: `spatstat`

`spatstat` is an R package for spatial statistics with a strong focus on analyzing spatial point patterns in 2D.

You can find documentation for this package at:

- <https://spatstat.org/>
- <https://spatstat.org/resources/spatstatQuickref.pdf>

## Random vs. deterministirc process

Let's denote the probability of an event occurring at point $(x,y)$ as $Prob(Event_{(x,y)})$. The points are located within a unit square ranging from 0 to 1.

- A random process: $Prob(Event_{(x,y)}) = B(n = 1, p = 0.5)$
- A deterministic process:<br>$Prob(Event_{(x,y)}) = x$
- A stochastic process: $Prob(Event_{(x,y)}) = x - x \cdot B(n = 1, p = 0.5)$

## Generate random values from a distribution

There is a family of functions that start with `r*` capable of generating random values from a given distribution.

```{r}
set.seed(437988)
```

From a nomral distribution:

```{r, echo=TRUE}
rnorm(n = 5, mean = 0, sd = 1)
```

From a binomial distribution:

```{r, echo=TRUE}
rbinom(n = 5, size = 1, prob = 0.5)
```

These functions are very useful for simulations.

## Random number generator and seed

In computers, there is no true random number generator; they all use pseudo-random number generators. This means that the random numbers produced by computers are just the output of a very complex function based on an input, or seed.

As a result, if we know the seed, we can perfectly predict the random numbers generated by a computer's random number generator.

Typically, computers use the current time as the seed (R uses this approach).

## Setting a seed in R

You can control the random number generation algorithm by setting a seed value in R.

```{r, echo=TRUE}
set.seed(437988)
rbinom(n = 5, size = 1, prob = 0.5)

set.seed(437988)
rbinom(n = 5, size = 1, prob = 0.5)
```

Note that the seed in R is actually a vector, a sequence of values, and `set.seed` changes this vector to a particular state.

If you do not set the seed again before rerunning the second `rbinom`, it will produce different results.

## What is $p$-value?

Let's say we have two samples from two different distributions: 1) $N(5, 1)$, 2) $N(5.4, 2)$. We want to perform a statistical test to compare their means ($H_1: \overline{x_1} \neq \overline{x_2}$). The $p$-value is the area under the curve that is more extreme than the test statistic, multiplied by 2.

```{r, dpi=300}
library(dplyr)
library(ggplot2)

set.seed(437988)

tibble(sim = 1:1000) |>
  rowwise() |>
  mutate(s1 = list(rnorm(100, 5, 1)),
         s2 = list(rnorm(100, 5.4, 2))) |>
  mutate(mean1 = mean(s1),
         mean2 = mean(s2),
         mean_diff = mean2 - mean1,
         t_stat = mean_diff/sqrt(1/100+4/100)) |>
  ggplot(aes(x = t_stat)) + 
  geom_histogram(bins = 12) +
  geom_vline(xintercept = 0, colour = "red") +
  labs(x = "t-statistic", y = "Freqency") +
  theme_minimal()
```

## Activities for today

- We will work on the following chapter from the textbook:
  - Chapter [8](https://paezha.github.io/spatial-analysis-r/activity-3-maps-as-processes.html): Activity 3: Maps as Processes
  - Chapter [10](https://paezha.github.io/spatial-analysis-r/activity-4-point-pattern-analysis-i.html): Activity 4: Point Pattern Analysis I
- The hard deadline is **Friday**, **January 31** (**12:00 pm**).

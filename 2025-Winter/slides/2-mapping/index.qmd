---
format: 
  revealjs:
    pagetitle: "Mapping in R"
    menu: false
    footer: "2025 Zehui Yin"
---

## Policy and agenda

- You need to finish the weekly reading **before** coming to the lab.
- Activity is marked as satisfactory completion or not:
  - Poor quality submissions will result in a 0.
  - Suspicious AI-generated content will be flagged (manually) and forwarded to the professor.
- We will work on activities during the lab:
  - The focus is more on *how to code* rather than on theories.

## Packages we use today

Load the following three packages.

```{r, echo=TRUE, eval=FALSE}
library(isdas)
library(sf)
library(tidyverse)
```

If you have trouble restoring the reproducible environment, you need to manually install the packages first.

```{r, echo=TRUE, eval=FALSE}
install.packages("remotes")
remotes::install_github("paezha/isdas")

install.packages("sf")

install.packages("tidyverse")
```

## What does each package do?

- `isdas`: The course companion package containing all the data we will use.
- `sf`: The GIS package that enables us to work with **vector** data.
- `tidyverse`: A meta-package that encompasses plotting, data manipulation, and additional functionality.

## `ggplot2` package

:::: {.columns}

::: {.column width="40%"}

![](./images/gglayers.png){height=300px}

:::

::: {.column width="60%"}

- `ggplot2` is one of the packages included in tidyverse.
- It enables us to use the Grammar of Graphics to create plots.
- It creates plots through overlaying layers created using `geom_*`.

:::

::::

## How layering works?

```{r}
library(ggplot2)
```

:::: {.columns}

::: {.column width="40%"}

```{.r code-line-numbers="1"}
ggplot(data = mpg)
```

First, we create a canvas.

:::

::: {.column width="60%"}

```{r}
p <- ggplot(data = mpg)
ggsave("./images/p1.png", p, height = 5, width = 5, dpi = 300)
```

![](./images/p1.png){width=500px}

:::

::::

## How layering works?

:::: {.columns}

::: {.column width="40%"}

```{.r code-line-numbers="2-3"}
ggplot(data = mpg) +
  aes(x = displ,
      y = hwy)
```

Then, we assign which variables go to which axis.

:::

::: {.column width="60%"}

```{r}
p <- ggplot(data = mpg) +
  aes(x = displ,
      y = hwy)
ggsave("./images/p2.png", p, height = 5, width = 5, dpi = 300)
```

![](./images/p2.png){width=500px}

:::

::::

## How layering works?

:::: {.columns}

::: {.column width="40%"}

```{.r code-line-numbers="4"}
ggplot(data = mpg) +
  aes(x = displ,
      y = hwy) +
  geom_point()
```

We add data points to the plot.

:::

::: {.column width="60%"}

```{r}
p <- ggplot(data = mpg) +
  aes(x = displ,
      y = hwy) +
  geom_point()
ggsave("./images/p3.png", p, height = 5, width = 5, dpi = 300)
```

![](./images/p3.png){width=500px}

:::

::::

## How layering works?

:::: {.columns}

::: {.column width="40%"}

```{.r code-line-numbers="5"}
ggplot(data = mpg) +
  aes(x = displ,
      y = hwy) +
  geom_point() +
  geom_smooth()
```

Finally, we add an (default: local polynomial) regression line to the points.

:::

::: {.column width="60%"}

```{r}
p <- ggplot(data = mpg) +
  aes(x = displ,
      y = hwy) +
  geom_point() +
  geom_smooth()
ggsave("./images/p4.png", p, height = 5, width = 5, dpi = 300)
```

![](./images/p4.png){width=500px}

:::

::::

## Mapping

Mapping an `sf` object (vector data) is straightforward. We use `geom_sf` for this purpose.

```{r, results='hide'}
library(sf)
nc <- st_read(system.file("shape/nc.shp", package = "sf"))
```

```{r, echo=TRUE}
ggplot(data = nc) +
  geom_sf(aes(fill = AREA))
```

## Activities for today

- We will work on the following chapter from the textbook:
  - Chapter [4](https://paezha.github.io/spatial-analysis-r/activity-statistical-maps-i.html): Activity: Statistical Maps I
  - Chapter [6](https://paezha.github.io/spatial-analysis-r/activity-2-statistical-maps-ii.html): Activity 2: Statistical Maps II
- The hard deadline is **Friday**, **January 24** (**12:00 pm**).

## References

- <https://ggplot2.tidyverse.org/>
- <https://metricsf20.classes.ryansafner.com/slides/1.3-slides#1>

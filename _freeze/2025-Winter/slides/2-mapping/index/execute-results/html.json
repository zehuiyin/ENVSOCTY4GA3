{
  "hash": "41b7893be6a4db265376bfa80da06cb4",
  "result": {
    "engine": "knitr",
    "markdown": "---\nformat: \n  revealjs:\n    pagetitle: \"Mapping in R\"\n    menu: false\n    footer: \"2025 Zehui Yin\"\n---\n\n\n\n## Policy and agenda\n\n- You need to finish the weekly reading **before** coming to the lab.\n- Activity is marked as satisfactory completion or not:\n  - Poor quality submissions will result in a 0.\n  - Suspicious AI-generated content will be flagged (manually) and forwarded to the professor.\n- We will work on activities during the lab:\n  - The focus is more on *how to code* rather than on theories.\n\n## Packages we use today\n\nLoad the following three packages.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(isdas)\nlibrary(sf)\nlibrary(tidyverse)\n```\n:::\n\n\n\nIf you have trouble restoring the reproducible environment, you need to manually install the packages first.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"remotes\")\nremotes::install_github(\"paezha/isdas\")\n\ninstall.packages(\"sf\")\n\ninstall.packages(\"tidyverse\")\n```\n:::\n\n\n\n## What does each package do?\n\n- `isdas`: The course companion package containing all the data we will use.\n- `sf`: The GIS package that enables us to work with **vector** data.\n- `tidyverse`: A meta-package that encompasses plotting, data manipulation, and additional functionality.\n\n## `ggplot2` package\n\n:::: {.columns}\n\n::: {.column width=\"40%\"}\n\n![](./images/gglayers.png){height=300px}\n\n:::\n\n::: {.column width=\"60%\"}\n\n- `ggplot2` is one of the packages included in tidyverse.\n- It enables us to use the Grammar of Graphics to create plots.\n- It creates plots through overlaying layers created using `geom_*`.\n\n:::\n\n::::\n\n## How layering works?\n\n\n\n::: {.cell}\n\n:::\n\n\n\n:::: {.columns}\n\n::: {.column width=\"40%\"}\n\n```{.r code-line-numbers=\"1\"}\nggplot(data = mpg)\n```\n\nFirst, we create a canvas.\n\n:::\n\n::: {.column width=\"60%\"}\n\n\n\n::: {.cell}\n\n:::\n\n\n\n![](./images/p1.png){width=500px}\n\n:::\n\n::::\n\n## How layering works?\n\n:::: {.columns}\n\n::: {.column width=\"40%\"}\n\n```{.r code-line-numbers=\"2-3\"}\nggplot(data = mpg) +\n  aes(x = displ,\n      y = hwy)\n```\n\nThen, we assign which variables go to which axis.\n\n:::\n\n::: {.column width=\"60%\"}\n\n\n\n::: {.cell}\n\n:::\n\n\n\n![](./images/p2.png){width=500px}\n\n:::\n\n::::\n\n## How layering works?\n\n:::: {.columns}\n\n::: {.column width=\"40%\"}\n\n```{.r code-line-numbers=\"4\"}\nggplot(data = mpg) +\n  aes(x = displ,\n      y = hwy) +\n  geom_point()\n```\n\nWe add data points to the plot.\n\n:::\n\n::: {.column width=\"60%\"}\n\n\n\n::: {.cell}\n\n:::\n\n\n\n![](./images/p3.png){width=500px}\n\n:::\n\n::::\n\n## How layering works?\n\n:::: {.columns}\n\n::: {.column width=\"40%\"}\n\n```{.r code-line-numbers=\"5\"}\nggplot(data = mpg) +\n  aes(x = displ,\n      y = hwy) +\n  geom_point() +\n  geom_smooth()\n```\n\nFinally, we add an (default: local polynomial) regression line to the points.\n\n:::\n\n::: {.column width=\"60%\"}\n\n\n\n::: {.cell}\n\n:::\n\n\n\n![](./images/p4.png){width=500px}\n\n:::\n\n::::\n\n## Mapping\n\nMapping an `sf` object (vector data) is straightforward. We use `geom_sf` for this purpose.\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = nc) +\n  geom_sf(aes(fill = AREA))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-9-1.png){width=960}\n:::\n:::\n\n\n\n## Activities for today\n\n- We will work on the following chapter from the textbook:\n  - Chapter [4](https://paezha.github.io/spatial-analysis-r/activity-statistical-maps-i.html): Activity: Statistical Maps I\n  - Chapter [6](https://paezha.github.io/spatial-analysis-r/activity-2-statistical-maps-ii.html): Activity 2: Statistical Maps II\n- The hard deadline is **Friday**, **January 24** (**12:00 pm**).\n\n## References\n\n- <https://ggplot2.tidyverse.org/>\n- <https://metricsf20.classes.ryansafner.com/slides/1.3-slides#1>\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
{
  "hash": "763cc9826df208c9f945a472a1a8368e",
  "result": {
    "engine": "knitr",
    "markdown": "---\nformat: \n  revealjs:\n    pagetitle: \"Point Pattern I\"\n    menu: false\n    footer: \"2025 Zehui Yin\"\n---\n\n\n\n## Packages we use today\n\nLoad the following three packages.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(isdas)\nlibrary(sf)\nlibrary(tidyverse)\nlibrary(spatstat)\n```\n:::\n\n\n\nIf you have trouble restoring the reproducible environment, you need to manually install the packages first.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"remotes\")\nremotes::install_github(\"paezha/isdas\")\n\ninstall.packages(\"sf\")\n\ninstall.packages(\"tidyverse\")\n\ninstall.packages(\"spatstat\")\n```\n:::\n\n\n\n## New package for today: `spatstat`\n\n`spatstat` is an R package for spatial statistics with a strong focus on analyzing spatial point patterns in 2D.\n\nYou can find documentation for this package at:\n\n- <https://spatstat.org/>\n- <https://spatstat.org/resources/spatstatQuickref.pdf>\n\n## Random vs. deterministirc process\n\nLet's denote the probability of an event occurring at point $(x,y)$ as $Prob(Event_{(x,y)})$. The points are located within a unit square ranging from 0 to 1.\n\n- A random process: $Prob(Event_{(x,y)}) = B(n = 1, p = 0.5)$\n- A deterministic process:<br>$Prob(Event_{(x,y)}) = x$\n- A stochastic process: $Prob(Event_{(x,y)}) = x - x \\cdot B(n = 1, p = 0.5)$\n\n## Generate random values from a distribution\n\nThere is a family of functions that start with `r*` capable of generating random values from a given distribution.\n\n\n\n::: {.cell}\n\n:::\n\n\n\nFrom a nomral distribution:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrnorm(n = 5, mean = 0, sd = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  0.5185718 -0.5801848  1.7541242 -1.4321465 -1.3573983\n```\n\n\n:::\n:::\n\n\n\nFrom a binomial distribution:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrbinom(n = 5, size = 1, prob = 0.5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0 1 0 1 0\n```\n\n\n:::\n:::\n\n\n\nThese functions are very useful for simulations.\n\n## Random number generator and seed\n\nIn computers, there is no true random number generator; they all use pseudo-random number generators. This means that the random numbers produced by computers are just the output of a very complex function based on an input, or seed.\n\nAs a result, if we know the seed, we can perfectly predict the random numbers generated by a computer's random number generator.\n\nTypically, computers use the current time as the seed (R uses this approach).\n\n## Setting a seed in R\n\nYou can control the random number generation algorithm by setting a seed value in R.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(437988)\nrbinom(n = 5, size = 1, prob = 0.5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 0 0 0 1\n```\n\n\n:::\n\n```{.r .cell-code}\nset.seed(437988)\nrbinom(n = 5, size = 1, prob = 0.5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 0 0 0 1\n```\n\n\n:::\n:::\n\n\n\nNote that the seed in R is actually a vector, a sequence of values, and `set.seed` changes this vector to a particular state.\n\nIf you do not set the seed again before rerunning the second `rbinom`, it will produce different results.\n\n## What is $p$-value?\n\nLet's say we have two samples from two different distributions. We want to perform a statistical test to compare their means ($H_1: \\overline{x_1} \\neq \\overline{x_2}$). The $p$-value is the area under the curve that is more extreme than the test statistic, multiplied by 2.\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-7-1.png){width=3000}\n:::\n:::\n\n\n\n## Activities for today\n\n- We will work on the following chapter from the textbook:\n  - Chapter [8](https://paezha.github.io/spatial-analysis-r/activity-3-maps-as-processes.html): Activity 3: Maps as Processes\n  - Chapter [10](https://paezha.github.io/spatial-analysis-r/activity-4-point-pattern-analysis-i.html): Activity 4: Point Pattern Analysis I\n- The hard deadline is **Friday**, **January 31** (**12:00 pm**).\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}